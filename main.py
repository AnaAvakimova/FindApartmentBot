import telebot
from telebot import types
import os
import sqlite3

bot_key = os.environ.get('TELEBOT_KEY')
bot = telebot.TeleBot(bot_key)
group_id = os.environ.get('CHAT_ID')

USER_STATE = {}  # dictionary for tracking user state
apartment = 0


def get_user_state(message):
    print(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {USER_STATE.get(message.from_user.id)}")
    print(USER_STATE)
    return USER_STATE.get(message.from_user.id)


def set_user_state(user_id, state):
    USER_STATE[user_id] = state
    print(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {USER_STATE[user_id]}")
    print(USER_STATE)


# Function to check if the user is a member
def is_user_member(chat_id, user_id):
    try:
        member = bot.get_chat_member(chat_id=chat_id, user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except:
        return False


# Function for /start message
def get_main_menu_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, is_persistent=True)
    button_check = types.KeyboardButton(text='üîç –ù–∞–π—Ç–∏ —Å–æ—Å–µ–¥–∞')
    button_reg = types.KeyboardButton(text='‚úçÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
    button_del = types.KeyboardButton(text='üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    markup.add(button_check, button_reg, button_del)
    return markup


# Ask user for their apartment during registration
def ask_apartment(message):
    print("–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã")
    bot.send_message(message.from_user.id, "–ö–∞–∫–æ–π —É –≤–∞—Å –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã? –¢–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –ø—Ä–æ–±–µ–ª–æ–≤:",
                     reply_markup=get_main_menu_markup())
    set_user_state(message.from_user.id, "awaiting_apartment")


@bot.message_handler(func=lambda message: get_user_state(message) == 'awaiting_apartment')
def handle_apartment(message):
    print("–°—Ä–∞–±–æ—Ç–∞–ª –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: handle_apartment")
    try:
        print('–ó–∞–ø—É—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã')
        user_id = message.from_user.id
        apartment_number = int(message.text)
        if apartment_number not in range(1, 536):
            bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã (–æ—Ç 1 –¥–æ 535)',
                             reply_markup=get_main_menu_markup())
        else:
            last_name = message.from_user.last_name if message.from_user.last_name is not None else ""
            name = f"{message.from_user.first_name} {last_name}"
            username = f"@{message.from_user.username}" if message.from_user.username is not None else f"[user](tg://user?id={user_id})"
            reg_user(user_id, name, username, apartment_number)  # –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            set_user_state(message.from_user.id, None)  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    except ValueError as e:
        print('–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –±—ã–ª –≤–≤–µ–¥–µ–Ω –≤ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ', e)
        second_mess = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä (—á–∏—Å–ª–æ):'
        bot.send_message(message.from_user.id, second_mess, reply_markup=get_main_menu_markup())


# Find user by their apartment
def check_user(message):
    print("–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã")
    bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å–æ—Å–µ–¥–∞. –¢–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –ø—Ä–æ–±–µ–ª–æ–≤:",
                     reply_markup=get_main_menu_markup())
    set_user_state(message.from_user.id, "checking_apartment")


@bot.message_handler(func=lambda message: get_user_state(message) == 'checking_apartment')
def check_apartment(message):
    print("–°—Ä–∞–±–æ—Ç–∞–ª –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: check_apartment")
    try:
        print('–ó–∞–ø—É—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ')
        apartment_number = int(message.text)
        user_id = message.from_user.id
        # connect to the database
        try:
            connection = sqlite3.connect('ostrov_database.db')
            cursor = connection.cursor()
            print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ SQLite')

            # get information about the user
            print(f"–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã - {apartment_number}")
            cursor.execute("SELECT name, username FROM Users WHERE apartment = ?", (apartment_number,))
            user_data = cursor.fetchall()
            print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã - {user_data}")
            if not user_data:
                second_mess = '–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.'
                bot.send_message(user_id, second_mess, reply_markup=get_main_menu_markup())
            else:

                for person in user_data:
                    mess = f"{person[0]} - {person[1]}"
                    bot.send_message(user_id, mess, parse_mode='Markdown', reply_markup=get_main_menu_markup())

        except sqlite3.Error as error:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ sqlite", error)
            second_mess = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
            bot.send_message(user_id, second_mess, reply_markup=get_main_menu_markup())

        finally:
            if (connection):
                connection.close()
                print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SQLite –∑–∞–∫—Ä—ã—Ç–æ")
            set_user_state(user_id, None)  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    except ValueError as e:
        print('–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –±—ã–ª –≤–≤–µ–¥–µ–Ω –≤ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ', e)
        second_mess = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä (—á–∏—Å–ª–æ):'
        bot.send_message(message.from_user.id, second_mess, reply_markup=get_main_menu_markup())


# Delete registration
def delete_registration_check(message):
    # connect to the database
    try:
        connection = sqlite3.connect('ostrov_database.db')
        cursor = connection.cursor()
        print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ SQLite')

        # get information about the user
        user_id = message.from_user.id
        # check if user is registered
        cursor.execute("SELECT * FROM Users WHERE user_id = ?", (user_id,))
        if cursor.fetchone() is None:
            second_mess = '–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.'
            bot.send_message(message.from_user.id, second_mess, reply_markup=get_main_menu_markup())
        else:
            # confirm deletion
            confirm_deletion(user_id)

    except sqlite3.Error as error:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ sqlite", error)
        second_mess = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏'
        bot.send_message(message.from_user.id, second_mess, reply_markup=get_main_menu_markup())

    finally:
        if (connection):
            connection.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SQLite –∑–∞–∫—Ä—ã—Ç–æ")


# Function for confirm deletion of registration
def confirm_deletion(user_id):
    markup = types.InlineKeyboardMarkup()
    yes_button = types.InlineKeyboardButton(text="–î–∞", callback_data="confirm_deletion_yes")
    no_button = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="confirm_deletion_no")
    markup.add(yes_button, no_button)
    bot.send_message(user_id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_deletion_"))
def callback_confirm_deletion(call):
    print('–°—Ä–∞–±–æ—Ç–∞–ª –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_confirm_deletion')
    # User decided to delete registration
    if call.data == "confirm_deletion_yes":
        print("–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã")
        bot.send_message(call.from_user.id, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –¢–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞:",
                         reply_markup=get_main_menu_markup())
        set_user_state(call.from_user.id, "delete_registration")
    # User decided not to delete registration
    elif call.data == "confirm_deletion_no":
        print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –Ω–µ —É–¥–∞–ª—è—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
        user_id = call.from_user.id
        second_mess = "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
        bot.send_message(user_id, second_mess, reply_markup=get_main_menu_markup())

    # Deletion of buttons
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=call.message.text,
                          reply_markup=None)


@bot.message_handler(func=lambda message: get_user_state(message) == "delete_registration")
def delete_registration(message):
    print('–°—Ä–∞–±–æ—Ç–∞–ª –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ delete_registration')
    # connect to the database
    try:
        connection = sqlite3.connect('ostrov_database.db')
        cursor = connection.cursor()
        print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ SQLite')
        # get information about the user
        user_id = message.from_user.id
        apartment_number = int(message.text)
        # check and delete registration
        cursor.execute("SELECT * FROM Users WHERE user_id = ? and apartment = ?", (user_id, apartment_number,))
        if cursor.fetchone() is None:
            second_mess = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ'
            bot.send_message(user_id, second_mess, reply_markup=get_main_menu_markup())
        else:
            sql_update_query = """DELETE from Users
                                  where user_id = ? and apartment = ?"""
            cursor.execute(sql_update_query, (user_id, apartment_number,))
            connection.commit()
            second_mess = '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
            bot.send_message(user_id, second_mess, reply_markup=get_main_menu_markup())

    except sqlite3.Error as error:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ sqlite", error)
        second_mess = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏'
        bot.send_message(user_id, second_mess, reply_markup=get_main_menu_markup())

    finally:
        if (connection):
            connection.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SQLite –∑–∞–∫—Ä—ã—Ç–æ")
        set_user_state(user_id, None)  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


# Registration
@bot.message_handler(func=lambda message: get_user_state(message) == "filled_apartment")
def reg_user(user_id, name, username, apartment_number):
    print("–°—Ä–∞–±–æ—Ç–∞–ª –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: reg_user")
    # connect to the database
    try:
        connection = sqlite3.connect('ostrov_database.db')
        cursor = connection.cursor()
        print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ SQLite')

        # add new user to the database
        sqlite_insert_query = """INSERT INTO Users
                              (user_id, name, username, apartment)
                              VALUES
                              (?, ?, ?, ?);"""
        values_to_insert = (user_id, name, username, apartment_number)
        cursor.execute(sqlite_insert_query, values_to_insert)
        connection.commit()
        second_mess = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'
        bot.send_message(user_id, second_mess, reply_markup=get_main_menu_markup())

    except sqlite3.IntegrityError as error:
        print("–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", error)
        second_mess = '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.'
        bot.send_message(user_id, second_mess, reply_markup=get_main_menu_markup())
    except sqlite3.Error as error:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ sqlite", error)
        second_mess = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
        bot.send_message(user_id, second_mess, reply_markup=get_main_menu_markup())

    finally:
        if (connection):
            connection.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SQLite –∑–∞–∫—Ä—ã—Ç–æ")


# Handle all messages with content_type 'text' and check if the user is in the group
@bot.message_handler(func=lambda message: True)
def check_membership(message):
    print("–°—Ä–∞–±–æ—Ç–∞–ª –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: check_membership")
    user_id = message.from_user.id
    if not is_user_member(group_id, user_id):
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –±–æ—Ç")
    else:
        # Process the user's command or message
        process_user_message(message)


def process_user_message(message):
    print("–¢–∏–ø —á–∞—Ç–∞:", message.chat.type)
    print("–ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", message.text)
    if message.chat.type != 'private':
        return

    if message.text == '/start':
        print("–í—ã–±—Ä–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç")
        first_mess = (f"<b>{message.from_user.first_name}</b>, –ø—Ä–∏–≤–µ—Ç!\n–ß—Ç–æ –≤—ã "
                      f"—Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?")
        bot.send_message(message.chat.id, first_mess, parse_mode='html', reply_markup=get_main_menu_markup())

    if message.text == 'üîç –ù–∞–π—Ç–∏ —Å–æ—Å–µ–¥–∞':
        print("–í—ã–±—Ä–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–π—Ç–∏ —Å–æ—Å–µ–¥–∞")
        check_user(message)
    if message.text == '‚úçÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è':
        print("–í—ã–±—Ä–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        ask_apartment(message)
    if message.text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é':
        print("–í—ã–±—Ä–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        delete_registration_check(message)


if __name__ == '__main__':
    bot.polling(none_stop=True, interval=0)
